version: '3'

services:
  # Characterize service
  alsvc_characterize:
    image: sgaroncse/alsvc_characterize:3.3.4
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
    volumes:
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/al/al_services/alsvc_characterize
    networks:
      - svc
    depends_on:
      al_service_server:
        condition: service_started

  # Extract service
  alsvc_extract:
    image: sgaroncse/alsvc_extract:3.3.4
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
    volumes:
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/al/al_services/alsvc_extract
    networks:
      - svc
    depends_on:
      al_service_server:
        condition: service_started

  # PDFId service
  alsvc_pdfid:
    image: sgaroncse/alsvc_pdfid:3.3.4
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
    volumes:
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/al/al_services/alsvc_pdfid
    networks:
      - svc
    depends_on:
      al_service_server:
        condition: service_started

  # Service server
  al_service_server:
    image: sgaroncse/assemblyline_dev:4.0.4
    ports:
      - '5003:5003'
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/alv4/
    command: python3 alv4_service_api/service/app.py
    networks:
      - al_core
      - svc
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Create test data
  create_test_data:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/alv4/alv4_ui/test/
    command: python3 create_test_data.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  # UI
  al_ui:
    image: sgaroncse/assemblyline_dev:4.0.4
    ports:
      - '5000:5000'
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/alv4/alv4_ui/al_ui/
    command: python3 app.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # SocketIO Server
  al_socketio:
    image: sgaroncse/assemblyline_dev:4.0.4
    ports:
      - '5002:5002'
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    working_dir: /opt/alv4/alv4_ui/al_ui/
    command: python3 socketsrv.py
    networks:
      - al_core
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Alerter
  al_alerter:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/alerter/run_alerter.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Expiry
  al_expiry:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/expiry/run_expiry.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Metrics aggregator
  al_metrics:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/metrics/run_metrics_aggregator.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Hearbeat manager
  al_heartbeat:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/metrics/run_heartbeat_manager.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Workflow
  al_workflow:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/workflow/run_workflow.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Dispatcher processes
  al_dispatcher_files:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/dispatching/run_files.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  al_dispatcher_submissions:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/dispatching/run_submissions.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Ingester Processes
  al_ingester_ingest:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/ingester/run_ingest.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  al_ingester_internal:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/ingester/run_internal.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  al_ingester_submit:
    image: sgaroncse/assemblyline_dev:4.0.4
    volumes:
      - C:\Users\Public\alv4\alv4\test\dev_env_windows\config\:/etc/assemblyline/
      - C:\Users\Public\alv4\:/opt/alv4/
    command: python3 /opt/alv4/alv4_core/al_core/ingester/run_submit.py
    networks:
      - al_core
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # Core servers
  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
    ports:
      - '9000:9000'
    command: server /data
    networks:
      - al_core

  kibana:
    image: docker.elastic.co/kibana/kibana:7.0.0
    environment:
      SERVER_NAME: localhost
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - al_core
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/"]
      interval: 30s
      timeout: 10s
      retries: 5

  apm_server:
    image: sgaroncse/apm-server:7.0.0
    environment:
      ES_HOSTS: elasticsearch:9200
    ports:
      - '8200:8200'
    networks:
      - al_core
    depends_on:
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: sgaroncse/elasticsearch:7.0.0
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      DISCOVERY_TYPE: 'single-node'
    ports:
      - '9200:9200'
    networks:
      - al_core
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.0.0
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/alv4/alv4/test/dev_env/config/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro
    command: filebeat -e -strict.perms=false
    networks:
      - al_core
    depends_on:
      elasticsearch:
        condition: service_healthy

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.0.0
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/alv4/alv4/test/dev_env/config/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro
    command: metricbeat -e --strict.perms=false
    networks:
      - al_core
    depends_on:
      elasticsearch:
        condition: service_healthy

  redis:
    image: redis
    ports:
      - '6379:6379'
      - '6380:6379'
    networks:
      - al_core
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: sgaroncse/nginx-ssl-dev:1.15.10-1
    ports:
      - '80:80'
      - '443:443'
    environment:
      - UI_HOST=10.0.75.1
      - FQDN=localhost
      - MAX_BODY_SIZE=100M
    command: /bin/bash -c "envsubst < /tmp/default.template > /etc/nginx/conf.d/default.conf && cat /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    networks:
      - al_core
    depends_on:
      kibana:
        condition: service_started

networks:
  al_core:
    driver: bridge
  svc:
    driver: bridge